var root = {
  todos: async (data, {mongo: {TODOs}}) => {
    console.log('Querying todos')
    return TODOs.find().toArray()
  },
  add: async ({title}, {mongo: {TODOs}}) => {
    const newTodo = {
      id: (new Date()).getTime(),
      title: title,
      completed: false
    }
    const response = await TODOs.insert(newTodo)
    return TODOs.find(Object.assign({id: response.insertedIds[0]}, newTodo)).toArray()
  },
  delete: async ({id, title, justOne}, {mongo: {TODOs}}) => {
    const query = {$or: [{'title': title}, {'id': id}]}
    let removed = []
    if (justOne) {
      let one = await TODOs.findOne(query)
      if (one) {
        // TODOs.deleteOne(?)
        await TODOs.remove({'_id': one._id})
        removed.push(one)
      }
    } else {
      await TODOs.find(query).forEach((item) => {
        removed.push(item)
      })
      await TODOs.remove(query)
    }
    return removed
  },
  // TODO optimize, use findOneAndUpdate
  update: async ({id, title, newTitle}, {mongo: {TODOs}}) => {
    if (!newTitle) return null
    const query = {$or: [{'title': title}, {'id': id}]}
    const updated = await TODOs.findOne({'title': title})
    updated.title = newTitle
    await TODOs.update(query, updated)
    return updated
  },
  setCompleted: async ({id, title}, {mongo: {TODOs}}) => {
    const query = {$or: [{'title': title}, {'id': id}]}
    const oldTodo = await TODOs.findOne(query)
    const returned = await TODOs.findOneAndUpdate(query, {$set: {completed: !oldTodo.completed}}, {returnOriginal: false})
    return returned.value
  },
  TODOs: {id: root => root._id | root.id}
}

module.exports = root
